\use-plugin{concourse-docs}

\title{\code{get} step}{get-step}

Fetches a resource, making it available to subsequent steps via the given
name.

\right-side{Examples}{
  \example{Simple Fetch & Test}{
    Almost every simple unit test job will look something like this: fetch my
    code with a \reference{get-step} and run its tests with a
    \reference{task-step}.

    \codeblock{yaml}{{
    plan:
    - get: my-repo
      trigger: true
    - task: unit
      file: my-repo/ci/unit.yml
    }}
  }

  \example{Fanning In}{
    If multiple \code{get}s are configured with \code{passed} constraints, all
    of the mentioned jobs are correlated. That is, with the following set of
    inputs:

    \codeblock{yaml}{{
    plan:
    - get: a
      passed: [a-unit, integration]
    - get: b
      passed: [b-unit, integration]
    - get: x
      passed: [integration]
    }}

    This means "give me the versions of \code{a}, \code{b}, and \code{x} that
    have passed the \italic{same build} of \code{integration}, with the same
    version of \code{a} passing \code{a-unit} and the same version of \code{b}
    passing \code{b-unit}."

    This is crucial to being able to implement safe "fan-in" semantics as
    things progress through a pipeline.
  }

  \example{Fetching with \code{params}}{
    The following plan fetches a version number via the \code{semver} resource,
    bumps it to the next release candidate, and \reference{put-step}{\code{put}}s
    it back.

    \codeblock{yaml}{{
    plan:
    - get: version
      params:
        bump: minor
        rc: true
    - put: version
      params:
        version: version/number
    }}
  }
}

\define-attribute{get: string}{
  \italic{Required.} The name of the resource once it is fetched. This name
  satisfies logical inputs to a \reference{tasks}{Task}, and may be referenced
  within the plan itself (e.g. in the \code{file} attribute of a
  \reference{task-step}{\code{task}} step).

  This is also the name of the resource to fetch, if \code{resource} is not
  set.
}{get-step-get}

\define-attribute{resource: string}{
  \italic{Optional. Defaults to \code{get}, the name.} The resource to fetch,
  as configured in \reference{pipeline-resources}.

  Use this attribute to rename a resource from the overall pipeline context
  into the job-specific context.
}{get-step-resource}

\define-attribute{version: ("latest" | "every" | \{version\})}{
  \italic{Optional. Defaults to \code{latest}.} The version of the resource to
  fetch.

  If set to \code{latest}, scheduling will just find the latest available
  version of a resource and use it, allowing versions to be skipped.  This is
  usually what you want, e.g. if someone pushes 100 git commits.

  If set to \code{every}, builds will walk through all available versions of
  the resource. Note that if \code{passed} is also configured, it will only
  step through the versions satisfying the constraints.

  If set to a specific version (e.g. \code{\{ref: abcdef123\}}), only that
  version will be used. Note that the version must be available and detected by
  the resource, otherwise the input will never be satisfied. You may want to
  use \reference{fly-check-resource} to force detection of resource versions,
  if you need to use an older one that was never detected (as all newly
  configured resources start from the latest version).
}{get-step-version}

\define-attribute{passed: [string]}{
  \italic{Optional.} When specified, only the versions of the resource that
  made it through the given list of jobs will be considered when triggering
  and fetching.
}{get-step-passed}

\define-attribute{params: object}{
  \italic{Optional.} A map of arbitrary configuration to forward to the
  resource. Refer to the resource type's documentation to see what it
  supports.
}{get-step-params}

\define-attribute{trigger: boolean}{
  \italic{Optional. Default \code{false}.} Set to \code{true} to auto-trigger
  new builds of the plan's job whenever this step has new versions available,
  as specified by the \code{resource} and any \code{passed} constraints.

  Otherwise, if no \code{get} steps set this to \code{true}, the job can only
  be manually triggered.
}{get-step-trigger}
